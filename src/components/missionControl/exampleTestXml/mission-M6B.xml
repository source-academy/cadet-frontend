<?xml version="1.0"?>
<CONTENT xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

<!-- ***********************************************************************
**** MISSION #M6B
************************************************************************ -->
<TASK coverimage="https://s3-ap-southeast-1.amazonaws.com/mission-assets/missions/Quicksort.png"
   kind="mission" number="M6B" startdate="2018-09-20T00:00:00+08" duedate="2099-10-02T23:59:59+08" 
   title="Sorting Things Out" story="mission-12">
    <READING>None</READING>

    <TEXT>
## Background

You heard from your friends that the IT staff used *merge sort* to sort the name list of all cadets at the Source Academy, before they could construct the *binary search tree*. You also remembered you have heard about **quicksort** before.

"Emmm, it is called **quicksort**. So, literally, shouldn't it be very fast? I bet that I could restore the name list faster with it."

## Some historical facts

**Quicksort** is an efficient sorting algorithm, sometimes also known as *partition-exchange sort*.

It was first developed in 1959 and published in 1961, by Tony Hoare, who is a British computer scientist and winner of the *Turing Award* in 1980. He was a visiting student at Moscow State University when he invented this algorithm. **Quicksort** was initially intended to be used to help translation between English and Russian.

&gt; Turing Award is an annual prize given by the Association for Computing Machinery (ACM) to "*an individual selected for contributions of a technical nature made to the computing community*". The Turing Award is generally recognized as *the highest distinction in computer science* and the "*Nobel Prize of computing*". Click [here](https://en.wikipedia.org/wiki/Turing_Award) (https://en.wikipedia.org/wiki/Turing_Award) for more information.

This mission has **three** tasks. Please remember to press "*Save*" button when you are done.
    </TEXT>

    <PROBLEMS>
        <PROBLEM maxgrade="4" maxxp="267" type="programming">
            <TEXT>
**Quicksort** is considered to be:
- Easy to understand;
- Moderately not simple to implement correctly;
- A little hard to analyze;
- Challenging to further optimize.

However, with the magic power of Source, **quicksort** can be easily understood and implemented. In order to implement quicksort using the list library in Source, we first need to implement a `partition` operation on a list that adheres to the following specification.

The function `partition` is applied to an possibly unsorted list `xs` and an element `p` that we call *pivot*. It returns a pair of two possibly unsorted lists, that when combined contain all elements of `xs`. The head of the pair contains all elements of `xs` that are smaller than or identical to `p` and the tail of the pair contains all elements of `xs` that are larger than `p`. In this task, it is irrelevant in what order the elements of `xs` appear in the result lists.

For example, `partition(list(5,6,1,7,9,2), 6)` may return a result that is equal to `pair(list(2, 1, 6, 5), list(9, 7))`. The order does not matter. A result that is equal to `pair(list(5, 6, 1, 2), list(7, 9))` is also allowed.

Please fill in the template given and implement the `partition` operation on a list.
            </TEXT>
            <SNIPPET>
                <TEMPLATE>
// Task 1
function partition(xs, p) {
    // Your answer here
}

// Test
// const my_list = list(1, 2, 3, 4, 5, 6);
// partition(my_list, 4);
                </TEMPLATE>
                <SOLUTION>
// [Marking Scheme] 4 marks
// 0 marks for totally wrong solutions
// 1 mark for solutions that make an attempt at solving the problem
// 2 marks for solutions that show general understanding but do not work
// 3 marks for solutions with minor mistakes
// 4 marks for correct solutions
                </SOLUTION>
                <GRADER>
                  function some_grader () {
                    return 0;
                  }
                  some_grader();
                </GRADER>
            </SNIPPET>
        </PROBLEM>

        <PROBLEM maxgrade="4" maxxp="267" type="programming">
            <TEXT>
**Quicksort** relies on the `partition` operation to sort things out. The cases of sorting the empty list and one-element lists are not difficult, as we hope you see easily. For other lists, we choose the `head` as *pivot*, and split the `tail` using `partition`. Since `partition` does not sort the resulting lists, we sort them using quicksort itself (using wishful thinking), before we combine them into the sorted overall result.

Use the template given to implement your **quicksort**. *Notice*: you need to copy-and-paste the `partition` function from Task 1 to here and make use of it.
            </TEXT>
            <SNIPPET>
                <TEMPLATE>
// Task 2
function partition(xs, p) {
    // Your answer from Task 1
}

function quicksort(xs) {
    // Your answer here
}

// Test
// const my_list = list(23, 12, 56, 92, -2, 0);
// quicksort(my_list);
                </TEMPLATE>
                <SOLUTION>
// [Marking Scheme] 4 marks
// 0 marks for totally wrong solutions
// 1 mark for solutions that make an attempt at solving the problem
// 2 marks for solutions that show general understanding but do not work
// 3 marks for solutions with minor mistakes
// 4 marks for correct solutions
                </SOLUTION>
                <GRADER>
function some_grader () {
  return 0;
}
some_grader();
                </GRADER>
            </SNIPPET>
        </PROBLEM>

        <PROBLEM maxgrade="1" maxxp="66" type="mcq">
            <TEXT>
Task 3 consists of 4 questions.
When implemented well, **quicksort** can be about two or three times faster than its main competitors, *merge sort* and *heap sort*. Thus, it is still commonly used in practice till now.

Thus, it becomes essential for us to understand its performance here.

Please answer the following questions:

Q1. What is the order of growth in time for `partition`?
            </TEXT>
            <CHOICE correct="false"><TEXT>O(1)</TEXT></CHOICE>
            <CHOICE correct="true"><TEXT>O(n)</TEXT></CHOICE>
            <CHOICE correct="false"><TEXT>O(n log(n))</TEXT></CHOICE>
            <CHOICE correct="false"><TEXT>O(n^2)</TEXT></CHOICE>
            <SNIPPET>
                <SOLUTION>
// 1. The order of growth in time for partition is O(n).
                </SOLUTION>
            </SNIPPET>
        </PROBLEM>

        <PROBLEM maxgrade="1" maxxp="66" type="mcq">
            <TEXT>
Q2. Find out the order of growth in time for `quicksort` under the following two scenarios:
    a) The given list is in ascending order, like `list(1, 2, 3, ..., n)`;
    b) The given list is in descending order, like `list(n, n - 1, ..., 1)`;
            </TEXT>
            <CHOICE correct="false"><TEXT>(a) O(n log(n)); (b) O(n log(n))</TEXT></CHOICE>
            <CHOICE correct="false"><TEXT>(a) O(n^2); (b) O(n log(n))</TEXT></CHOICE>
            <CHOICE correct="false"><TEXT>(a) O(n log(n)); (b) O(n^2)</TEXT></CHOICE>
            <CHOICE correct="true"><TEXT>(a) O(n^2); (b) O(n^2)</TEXT></CHOICE>
            <SNIPPET>
                <SOLUTION>
// 2. a) The order of growth in time is O(n^2).
// b) The order of growth in time is O(n^2).
                </SOLUTION>
            </SNIPPET>
        </PROBLEM>

        <PROBLEM maxgrade="1" maxxp="67" type="programming">
            <TEXT>
Q3. Create a list of the integers from 1 to 11 that can be sorted in the fastest way using **quicksort**. Fill in the template list below.
            </TEXT>
            <SNIPPET>
                <TEMPLATE>
const fastest_list = list(/*Fill in your numbers here outside of the comments*/);
                </TEMPLATE>
                <SOLUTION>
// the right answer
                </SOLUTION>
                <GRADER>
function some_grader () {
  return 0;
}
some_grader();
                </GRADER>
            </SNIPPET>
        </PROBLEM>

        <PROBLEM maxgrade="1" maxxp="67" type="mcq">
            <TEXT>
Q4. Based on your answer to the last question, which of these is true of **quicksort**?
            </TEXT>
            <SNIPPET>
                <SOLUTION>
// The performance of quicksort is not stable. It depends on the input data. We need to do optimization on the pivot selection to avoid the worst cases.
                </SOLUTION>
            </SNIPPET>
            <CHOICE correct="false"><TEXT>Quicksort is inefficient because it always uses O(n^2) time.</TEXT></CHOICE>
            <CHOICE correct="false"><TEXT>Like merge sort, quicksort always runs in O(n log(n)) time. </TEXT></CHOICE>
            <CHOICE correct="true"><TEXT>The performance of quicksort is not stable and depends on the input data. We need to optimize on pivot selection to avoid the worst cases.</TEXT></CHOICE>
            <CHOICE correct="false"><TEXT>The quicksort we have implemented has a best case that can run in O(n) time.</TEXT></CHOICE>
        </PROBLEM>
    </PROBLEMS>

    <TEXT>
## Submission

Save your mission on the Source Academy and your work will be graded once the deadline has passed.

**IMPORTANT**: Make sure that everything for your programs to work is on the left hand side (Editor) and not in the Side Content! This is because only the programs in the Editor are preserved.
    </TEXT>

    <DEPLOYMENT interpreter="2">
    </DEPLOYMENT>
    <GRADERDEPLOYMENT interpreter="4">
    </GRADERDEPLOYMENT>
    <WEBSUMMARY>A quick taste of quicksort</WEBSUMMARY>
  </TASK>
</CONTENT>