<?xml version="1.0"?>
<CONTENT xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xlink="http://128.199.210.247">

<!-- ***********************************************************************
**** MISSION M1A
************************************************************************ -->
<TASK kind="mission" coverimage="https://i.imgur.com/amJe5Bb.png" story="mission-2" number="M1A" startdate="2019-01-16T00:00+08" duedate="2099-01-25T23:59+08" title="Rune Trials">
    <READING>Textbook Sections 1.1.1 to 1.1.4</READING>
    <WEBSUMMARY>
      Welcome to the Source Academy! This is your first mission.
    </WEBSUMMARY>
    <TEXT>
Every year, the Source Academy holds a trial for worthy candidates to be trained in the Way of the Source. This will be their first step on a lifelong journey of bringing peace and justice to the galaxy.

After years of anticipation, it is finally your turn. The instructors will give you some basic training before you are tested with a set of challenges. If you pass these challenges, you will be initiated into the Academy.

## Mission Overview

In Lecture L1, we discussed how to generate runes. Today we will practice drawing them in Task 2, 3 and 4.

For this mission, the Playground loads the `RUNES` library. This provides the four runes discussed in class: `rcross`, `sail`, `heart`, and `nova`. For example, you can display `rcross` with the following command in the REPL:

```
show(rcross);
```

Also defined in the `RUNES` library are the following functions as discussed in class:

* `stack`
* `stack_frac`
* `quarter_turn_right`
* `flip_horiz`
* `flip_vert`
* `turn_upside_down`
* `quarter_turn_left`
* `beside`
* `make_cross`
* `repeat_pattern`
* `stackn`

In addition to the ones you saw in lecture, we have also defined a few more basic runes that you can use:

* square
* blank
* circle
* pentagram

In writing rather large, complex programs, one does not often understand (or even see) every single line of the program, since such programs are usually written by several people, each in charge of smaller components. The key idea in functional abstraction is that as the programmer, you need not understand how each function works. All you need to know is what each function does and its signature (such as what parameters to pass). More specifically, **you need not read the source for the predefined functions listed above**. You may refer to the lecture slides to understand what arguments each function requires and its corresponding effect. You can also see the signature of the function by entering the function name with a semicolon in the REPL, for example,
```
beside;
```
Now we will use these functions as primitives building blocks to draw our own pictures.


This mission consists of **four** tasks. Use the given templates to complete the tasks.

    </TEXT>
    <PROBLEMS>
        <PROBLEM maxgrade="0" type="programming">
            <TEXT>
Your first task shall be to practise writing comments. Our programs should be written such that they communicate the computational process effectively. Often, free text can improve this communication process, and therefore, programming languages allow for **comments**, which are pieces of text that are not executed by the computer. In Source, you can use either `//` to turn the rest of line into a comment, or a pair of `/*` and `*/` to turn anything in between into a comment. Example:

```
/*
Turning a picture left (counter-clockwise) by a quarter (90 degrees) is
the same as turning it right (clockwise) by three quarters (270 degrees).
quarter_turnleft turns the picture upside down (180 degrees), followed
by turning right by another quarter (90 degrees), which means turning
it right by 180 + 90 = 270 degrees.
*/
function quarter_turnleft(picture) {
    return quarter_turn_right(
               turn_upside_down(picture));
}
// example usage
quarter_turnleft(heart);

```
            </TEXT>
            <SNIPPET>
                <TEMPLATE>
function flipvert(picture) {
    return turn_upside_down(flip_horiz(picture));
}
show(flipvert(sail));
                </TEMPLATE>
                <SOLUTION>
// [Marking Scheme]
// 0 marks

// flipping a picture vertically can be achieved
// by first flipping it horizontally and then
// turning the result upside_down (why?) (discuss
// the usefulness of this comment! Focus: Does
// it help the audience understand the program?)
function flipvert(picture) {
    return turn_upside_down(flip_horiz(picture));
}
// example usage
show(flipvert(sail));

                </SOLUTION>
            </SNIPPET>
        </PROBLEM>
        <PROBLEM maxgrade="4" type="programming">
          <TEXT>
Write a function `mosaic` that takes four runes as arguments and arranges them in a 2 by 2 square, starting with the top-right corner, going clockwise. In particular, the command

```
show(mosaic(rcross, sail, corner, nova));
```

should draw the following:

![Mosaic Reference Image](https://i.imgur.com/c9oR9Y8.png)

NOTE: Take note of the position of each of the images in the mosaic.
          </TEXT>
          <SNIPPET>
            <TEMPLATE>
function mosaic(p1, p2, p3, p4) {
    // your answer here
}

// Test
show(mosaic(rcross, sail, corner, nova));
            </TEMPLATE>
            <SOLUTION>
// [Marking Scheme]
// 0 marks for totally wrong solutions
// 1 mark for solutions that make an attempt at solving the problem
// 2 marks for solutions that show general understanding but do not work
// 3 marks for solutions with minor mistakes
// 4 marks for correct solutions
            </SOLUTION>
            <GRADER>
            function some_grader () {
                return 0;
            }
            some_grader();
            </GRADER>
          </SNIPPET>

        </PROBLEM>
        <PROBLEM maxgrade="4" type="programming">
          <TEXT>
Write a function `upside_down_mosaic` that takes four runes as arguments and creates a mosaic that is rotated a 180 degrees.

```
show(upside_down_mosaic(rcross, sail, corner, nova));
```

should draw the following:

![Mosaic Reference Image](https://i.imgur.com/JX0p5HE.png)

NOTE: Its the whole mosaic turned 180 degrees, not individual pieces rotated and then joined into a mosaic.
          </TEXT>
          <SNIPPET>
            <TEMPLATE>
function mosaic(p1, p2, p3, p4) {
    // your answer from the previous task here
}

function upside_down_mosaic(p1, p2, p3, p4) {
    // your answer here
}

// Test
show(upside_down_mosaic(rcross, sail, corner, nova));
            </TEMPLATE>
            <SOLUTION>
// [Marking Scheme]
// 0 marks for totally wrong solutions
// 1 mark for solutions that make an attempt at solving the problem
// 2 marks for solutions that show general understanding but do not work
// 3 marks for solutions with minor mistakes
// 4 marks for correct solutions
            </SOLUTION>
            <GRADER>
                function some_grader () {
                return 0;
            }
            some_grader();
            </GRADER>
          </SNIPPET>

        </PROBLEM>
        <PROBLEM maxgrade="4" type="programming">
          <TEXT>
Suppose we now want to apply a different transformation to the mosaic pattern, instead of the `turn_upside_down` function. It would be tedious to create a new function for every such transformation function, wouldn't it? So let us use the power of abstraction!

Write a function that takes four runes as arguments and creates a mosaic, after which you apply a _given_ transformation function to the mosaic and return the resultant image. In particular, the command

```
show(transform_mosaic(rcross, sail, corner, nova, make_cross));
```

should draw the following:

![Transformed-Mosaic Reference Image](https://i.imgur.com/amJe5Bb.png)

NOTE: Take note of the position of each of the images in the resulting image.
          </TEXT>
          <SNIPPET>
            <TEMPLATE>
function mosaic(p1, p2, p3, p4) {
    // your answer from the previous task here
}

function transform_mosaic(p1, p2, p3, p4, transform) {
    // your answer here
}

// Test
show(transform_mosaic(rcross, sail, corner, nova, make_cross));
            </TEMPLATE>
            <SOLUTION>
// [Marking Scheme]
// 0 marks for totally wrong solutions
// 1 mark for solutions that make an attempt at solving the problem
// 2 marks for solutions that show general understanding but do not work
// 3 marks for solutions with minor mistakes
// 4 marks for correct solutions
            </SOLUTION>
            <GRADER>
                function some_grader () {
                  return 0;
                }
                some_grader();
            </GRADER>
          </SNIPPET>

        </PROBLEM>
    </PROBLEMS>
    <TEXT>
## Submission

Make sure that everything for your programs to work is on the left hand side and **not** in the REPL on the right! This is because only that program is used to assess your solution.
    </TEXT>
    
    <DEPLOYMENT interpreter="1">
        <GLOBAL>
          <IDENTIFIER>add_one</IDENTIFIER>
          <VALUE>(x) => {return x+1;}</VALUE>
        </GLOBAL>
        <EXTERNAL name="RUNES">
        
            <SYMBOL>show</SYMBOL>

            <SYMBOL>flip_horiz</SYMBOL>
            <SYMBOL>flip_vert</SYMBOL>
            <SYMBOL>turn_upside_down</SYMBOL>
            <SYMBOL>quarter_turn_left</SYMBOL>
            <SYMBOL>quarter_turn_right</SYMBOL>
            <SYMBOL>beside</SYMBOL>
            <SYMBOL>stack</SYMBOL>
            <SYMBOL>stackn</SYMBOL>
            <SYMBOL>stack_frac</SYMBOL>
            <SYMBOL>repeat_pattern</SYMBOL>
            <SYMBOL>make_cross</SYMBOL>

            <SYMBOL>rcross</SYMBOL>
            <SYMBOL>sail</SYMBOL>
            <SYMBOL>corner</SYMBOL>
            <SYMBOL>nova</SYMBOL>
            <SYMBOL>heart</SYMBOL>
            <SYMBOL>circle</SYMBOL>
            <SYMBOL>ribbon</SYMBOL>
            <SYMBOL>square</SYMBOL>
            <SYMBOL>blank</SYMBOL>
            <SYMBOL>pentagram</SYMBOL>
        </EXTERNAL>
    </DEPLOYMENT>
    <GRADERDEPLOYMENT interpreter="1">
        <EXTERNAL name="RUNES">
          <SYMBOL>red</SYMBOL>
          <SYMBOL>pink</SYMBOL>
          <SYMBOL>purple</SYMBOL>
          <SYMBOL>indigo</SYMBOL>
          <SYMBOL>blue</SYMBOL>
          <SYMBOL>green</SYMBOL>
          <SYMBOL>yellow</SYMBOL>
          <SYMBOL>orange</SYMBOL>
          <SYMBOL>brown</SYMBOL>
          <SYMBOL>black</SYMBOL>
          <SYMBOL>white</SYMBOL>
          <SYMBOL>square</SYMBOL>
          <SYMBOL>blank</SYMBOL>
          <SYMBOL>rcross</SYMBOL>
          <SYMBOL>sail</SYMBOL>
          <SYMBOL>corner</SYMBOL>
          <SYMBOL>nova</SYMBOL>
          <SYMBOL>circle</SYMBOL>
          <SYMBOL>heart</SYMBOL>
          <SYMBOL>pentagram</SYMBOL>
          <SYMBOL>ribbon</SYMBOL>
          <SYMBOL>quarter_turn_left</SYMBOL>
          <SYMBOL>quarter_turn_right</SYMBOL>
          <SYMBOL>turn_upside_down</SYMBOL>
          <SYMBOL>scale_independent</SYMBOL>
          <SYMBOL>scale</SYMBOL>
          <SYMBOL>translate</SYMBOL>
          <SYMBOL>rotate</SYMBOL>
          <SYMBOL>stack_frac</SYMBOL>
          <SYMBOL>stack</SYMBOL>
          <SYMBOL>stackn</SYMBOL>
          <SYMBOL>beside_frac</SYMBOL>
          <SYMBOL>beside</SYMBOL>
          <SYMBOL>flip_vert</SYMBOL>
          <SYMBOL>flip_horiz</SYMBOL>
          <SYMBOL>make_cross</SYMBOL>
          <SYMBOL>repeat_pattern</SYMBOL>
          <SYMBOL>overlay_frac</SYMBOL>
          <SYMBOL>overlay</SYMBOL>
          <SYMBOL>show</SYMBOL>
          <SYMBOL>__compile</SYMBOL>
          <SYMBOL>__are_pictures_equal</SYMBOL>
        </EXTERNAL>
    </GRADERDEPLOYMENT>
</TASK>

</CONTENT>
