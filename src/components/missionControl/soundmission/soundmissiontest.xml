<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<CONTENT xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <TASK kind="mission" duedate="2019-02-19T23:59+08" coverimage="https://s3-ap-southeast-1.amazonaws.com/mission-assets/missions/morseCode.png" startdate="2019-02-13T00:00+08" title="Premorseal Communications" story="mission-12">
    <READING>Textbook Sections 2.2.1</READING>
    <WEBSUMMARY/>
    <TEXT>
### The Sound Library
In this mission we produce sounds and play them on our devices. A Sound is a digital sound that can be efficiently handled using your browser's built-in sound processing capabilities.

To describe an analog Sound, you need an analog wave function, and the duration of the sound in seconds. The wave function takes a time *t* (in seconds) as argument and returns the amplitude of the wave (a number between -1 and 1) at time *t*. An example wave function `my_wave` has this type:

`my_wave` : Number â†’ Number

The following constructor and accessor functions are given:

```
function make_sound(wave, duration) {
    return pair(wave, duration);
}

function get_wave(sound) {
    return head(sound);
}

function get_duration(sound) {
    return tail(sound);
}
```

As usual, make sure you do not break the data abstraction of a Sound and always use these functions to make and access Sounds.

To try things out, you are given a function

`noise` : Number â†’ Sound

where the given Number is the duration of the noisy Sound to be created, in seconds.

The `play` function accepts digital Sounds and has the type:

`play` : Sound â†’ `undefined`

**Warning: In the following, we produce actual sounds that might be very loud! Turn down the volume of your speakers before you attempt to play sounds, especially in a public place or if you are wearing headphones.**

You can test and play the following:

```
play((noise(0.5)));
```

after which you should hear half a second of noise. (If you don't, your browser does not support sound; use a different one or ask your Avenger for advice).

### Sound Discipline

We require that all Sounds have the following property:

```
(get_wave(Sound))(get_duration(Sound) + t) === 0
```
for any number `t` &gt; 0. Thus the wave must return 0 when the duration is up. This Sound discipline will make your tasks a lot easier.


This mission has **three** tasks.
    </TEXT>
    <PROBLEMS>
      <PROBLEM type="programming" maxgrade="3" maxxp="255">
        <SNIPPET>
          <SOLUTION>
// [Marking Scheme]
// 1 mark for attempt
// 1 mark for returning 0 after duration (no deduction for off by one error)
// 1 mark for correctness
// -1 mark for not using get_wave

function noise(duration) {
    const wave = t =&gt; t &gt; duration ? 0 : math_random() * 2 - 1;
    return make_sound(wave, duration);
}


function cut_sound(sound, duration) {
    const wave = get_wave(sound);
    return make_sound(t =&gt; t &gt; duration ? 0 : wave(t), duration);
}

// testing
play(cut_sound(noise(2), 1));
 
                </SOLUTION>
          <TEMPLATE>
// Task 1
function noise(duration) {
    const wave = t =&gt; t &gt; duration ? 0 : math_random() * 2 - 1;
    return make_sound(wave, duration);
}

function cut_sound(sound, duration) {
    /* your answer here */
}


const c = cut_sound(noise(5), 0.5);
play(c);
                </TEMPLATE>
        </SNIPPET>
        <TEXT>
Write a function `cut_sound` that takes a Sound and a new duration (in seconds) as arguments. It returns a new Sound that ends at the new duration. You can assume that the new duration is shorter than the duration of the given Sound.

`cut_sound` : (Sound, Number) =&gt; Sound

Note: Make sure your Sound follows the Sound discipline.
            </TEXT>
      </PROBLEM>
      <PROBLEM type="programming" maxgrade="2" maxxp="170">
        <SNIPPET>
          <SOLUTION>
// [Marking Scheme]
// 1 mark for attempt
// 1 mark for returning a sound
// -1 mark for not returning 0 after duration (error carried forward, no
//                                             decution for off by one error)

function sine_sound(freq, duration) {
    const sine_wave = t =&gt; t &gt; duration ? 0 : math_sin(2 * math_PI * freq * t);
    return make_sound(sine_wave, duration);
}

// testing
play(sine_sound(500, 1));
                </SOLUTION>
          <TEMPLATE>
// Task 2
function sine_sound(frequency, duration) {
    /* your answer here */
}

play(sine_sound(500, 1));
                </TEMPLATE>
        </SNIPPET>
        <TEXT>
A sine wave is defined by

*sinewave*(*t*) = *sin*(2 pi *f* *t*)

where *t* is the time since the begining of the sound (in seconds), *f* is the frequency (in hertz) and *sin* is the trigonometric sine function whose argument is considered given in radians.

Write a function `sine_sound` that takes a frequency (in hertz) and a duration (in seconds) as arguments. It returns a Sound of the given duration with the wave function *sinewave* defined above.

`sine_sound` : (Number, Number) =&gt; Sound

You will find the predeclared `math_sin` function useful for this task.

Note: The return value is a Sound.
            </TEXT>
      </PROBLEM>
      <PROBLEM type="programming" maxgrade="7" maxxp="590">
        <SNIPPET>
          <SOLUTION>
// [Marking Scheme]
// 1 mark for attempt
// 1 mark for sequencing sounds
// 1 mark for sequencing sounds in correct order
// 1 mark for sequencing sounds in correct length (the length of silence
//            will also be counted, so if its a silent sound of the correct
//            length then it deserves this mark)
// 1 mark for returning sound
// 1 mark for using consecutively to construct distress signal
// 1 mark for distress signal correctness (no deduction for extra pause after
//            the last tone)
// -0.5 mark for not considering the basic case in `consecutively`. (should return silence(0) when the argument is empty list)
// -1 mark for poor abstraction

function append_sounds(s1, s2) {
    return make_sound(t => {
        if (t &lt; get_duration(s1)) {
            return (get_wave(s1))(t);
        } else {
            return (get_wave(s2))(t - get_duration(s1));
        }
    }, get_duration(s1) + get_duration(s2));
}

function sine_sound(freq, duration) {
    const sine_wave = t =&gt; t &gt; duration ? 0 : math_sin(2 * math_PI * freq * t);
    return make_sound(sine_wave, duration);
}

function silence_sound(duration) {
    return make_sound(t => 0, duration);
}

function silence(duration) {
    return silence_sound(duration);
}

function consecutively(list_of_sounds) {
    return accumulate(append_sounds, silence_sound(0), list_of_sounds);
}

// Create dot, dash and pause sounds first
const dot_sound = sine_sound(750, 0.1);
const dash_sound = sine_sound(750, 0.3);
const dot_pause = silence(0.1);
const dash_pause = silence(0.3);

// Create sounds for each letter
const S_sound = consecutively(list(dot_sound, dot_pause, dot_sound, dot_pause, dot_sound));
const O_sound = consecutively(list(dash_sound, dot_pause, dash_sound, dot_pause, dash_sound));

// Build the signal out of letter sounds and pauses
const distress_signal = consecutively(list(S_sound, dash_pause, O_sound, dash_pause, S_sound));

// Play distress signal
play_safe(distress_signal);
                </SOLUTION>
          <TEMPLATE>
// Task 3
function consecutively(list_of_sounds) {
    /* your answer here */
}

// Create dot, dash and pause sounds first
const dot_sound = "your answer here";
const dash_sound = "your answer here";
const dot_pause = "your answer here";
const dash_pause = "your answer here";

// Create sounds for each letter
const S_sound = "your answer here";
const O_sound = "your answer here";

// Build the signal out of letter sounds and pauses
const distress_signal = "your answer here";

// Play distress signal
play(distress_signal);
                </TEMPLATE>
        </SNIPPET>
        <TEXT>
Write a function `consecutively` that takes a list of Sounds as argument. It returns a new Sound composed of the Sounds in the list in sequential order, considering their respective durations.

Now, we need to set up the transmitter and call for help. You need to play "SOS" in Morse code. Morse code consists of short sounds called *dots*, long sounds called *dashes*, and pauses. The dot duration is the basic unit of time measurement; we require each dot to be 0.1s long. The duration of a dash is three times the duration of a dot. Dots or dashes within the same letter are separated by a silence that has the same length as a dot, and the letters of a word such as "SOS" are separated by a silence that has the same length as a dash.

Use a sine wave of 750 Hz for the tone and don't place any pauses before or after the Morse code signal for the word "SOS".

**The generated sound may sound a bit buggy. Use safe_play() to play the sound instead as there might be issues with buffering the sound**

![Morse code letters](https://www.comp.nus.edu.sg/~cs1101s/images/morsecodeletters.png)
            </TEXT>
      </PROBLEM>
    </PROBLEMS>
    <DEPLOYMENT interpreter="2">
      <EXTERNAL name="SOUNDS">
        <SYMBOL>get_duration</SYMBOL>
        <SYMBOL>get_wave</SYMBOL>
        <SYMBOL>is_sound</SYMBOL>
        <SYMBOL>make_sound</SYMBOL>
        <SYMBOL>play</SYMBOL>
        <SYMBOL>play_safe</SYMBOL>
      </EXTERNAL>
    </DEPLOYMENT>
  </TASK>
</CONTENT>
